When would you want to use a remote repository rather than keeping all your work local?

I would want to use a remote repository when I am working on a project with others like my teammates and we collaborate and share data with each other to reach the final version we want and expect of our code. In fact, a remote repository has a merit over a local one in some way since we can access it anytime from any computer unlike the local repository that we must access it from just the computer it was created on or the computer it is stored in.


Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

I like pulling changes manually because that way, when I'm working on code, it doesn't change without me expecting it. For example, if I know the new version of some code is broken, I might not want to pull that change until I have the bug fixed. 


Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks are a great way of making a copy of a repository from someone's GitHub account to your GitHub account so that you can edit your copy and make changes as you like without affecting the original repository you forked from.
Clones are a way of copying an existing repository to your local machine from GitHub or from another directory on your machine.
Branches exist in one repository. if you have new ideas or experments you wanna see on screen to taste them in a practcal way, you can create a branch to work on a new feature or something and if it worked out, you can merge it with your main branch.
I would use forks when I want someone else collaborate with me on my project or vice versa. Forks are used to either propose changes to someone else's project or to use someone else's project as a starting point for your own idea.

"Forks, clones, and branches are all ways to add new changes without affecting the existing version. With branches the new changes are added in the same repository. Forking and cloning both copy an entire repository to a new location. The difference between forking and cloning is that forking is a special construct made by GitHub. You can only fork a GitHub repository to another location on GitHub, while you can clone any Git repository to anywhere you have access to.
I use branching for most cases where I want to add new changes to a repository while keeping an easy reference to a previous version, especially when collaborating with other people.  I clone a repository on GitHub when I want to work on that repository locally rather than using the GitHub website. I fork a repository on GitHub when I want to make changes to that repository public, but I don't have permission to modify the original." By the way, Thanks for Caroline Buckey for this clarification (the last part of this answer inside quotation marks).


What is the benefit of having a copy of the last known state of the remote stored locally?

One of the benefits of having a copy of the last known state of the remote stored locally is enabling you to work offline after you clone it and to start where others end. So, you can update your local copy if you know that you will not have internet access for a while and need to keep working. You can do this even if you are not ready to merge those changes into your own branches yet. Then if you want, you can perform the merge while offline too.
This also makes comparing your version of code to others' versions easier and in less time, and it makes it easy to resolve conflicts between different versions of code if any.


How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

If there is no Git and GitHub, it will not affect the developer in code writing itself but it will affect him if he made a mistake or typo which I'm pretty sure he will because everone makes mistakes and if he wants others to review his work.
When your code doesn't run perfectly, it would be harder to find your mistakes and typos to fix them without Git since you have to scan your code line by line manually to find the problem and fix them. This is doable but it consumes time and effort and may distract you a little of your basic task or job creating programs and achieve great things.
When you want your colleagues or your supervisor to check your changes in code before you merge them into the main branch, it would be harder without GitHub since you will have to invite them to look at the changes on your own computer or sending the files through emails and it will also be tedious for them to find mistakes and typos withot Git too. And after they correct mistakes if any, they send the files back to the developer again and it will be harder for the developer to compare his version of code to his colleagues' version without Git and GitHub. So, Git and GitHub are perfect tools in writing programs and collaborating with others since it makes the process of working with code smooth and less problematic.


When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

I would want to make changes in a separate branch rather than directly in master when I am working on a new feature or new idea and I'm not quit sure of the results and have a doubt that it may break my code or my program. It's also better to work on a seprate branch when I want others to collaborate with me and review my work and help me to develop it in the right way, so I can gurantee that it will not break the code if I merged it in the master branch. So, working in a seprate branch does pay a lot of benefits in most cases, it's the safe zone to the programmer that he can play at in any direction he likes freely without fearing of braking and corrupting things. On the other hand, working directly in master is cool somehow since it has less complicated process. But unlike working in a seprate branch, the programmer is very restricted in this case to make changes especially big ones since it may casue the program stop and cruch. It's suitable to work on the master directly if you're gonna make a very small change you experienced before and you are sure it will not cause a problem. Finally, it's always prefered to work on a seprate branch first and if you are satisfied with the results and resolved the problems if any, you can merge your changes- big or small- into your master without fearing of breaking your code.
"I tend to work directly in master more often when I'm working on my own or with just one or two other people. When working with a large group, though, using branches to keep track of which changes have already been reviewed and approved is extremely helpful."  By the way, Thanks for Caroline Buckey for this clarification (the last part of this answer inside quotation marks).