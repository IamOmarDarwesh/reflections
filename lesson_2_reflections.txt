
What happens when you initialize a repository? Why do you need to do it?

When initializing a repository, it will be more efficent to achieve a lot of things in coding. It can store the whole history of changes in coding of a file and you can go back to any previous version you like in your code. 
One of the reasons I may need to use it that I can detect and modify a bug introduced in my code in an easy way and I can create a project from scratch through a repository.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is like a mediator between the working directory and the repository. It helps the developer to control what he wants to commit and how. The developer may want to change some files and leave the rest, so the staging area helps him doing this. After the developer determine which files he will make changes to in his working directory, he adds them to the staging area then moves them to the repository. Thus, it helps the developer to make a commit anytime even if it's a tiny change.


How can you use the staging area to make sure you have one commit per logical change?

If I've made more than one logical change since committing, I can add all the changes affected by the first logical change to the staging area, then commit those without committing the others. 


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

The idea of branches in Git is really helpful since it encourages the developer to try things in his head out which makes him more creative and looks crative as well because he shows others what he has in mind. It also helps to make updates to an application or a project without affecting current users. This is good because the new updates may be bad and having problems. So if you wanna try an update and see the reaction of the update before you offically announce it, you may create a branch and show the update to your colleagues and friends first and thake the feedback and work on improving your changes if you need to.


How do the diagrams help you visualize the branch structure?

It helps me to see a big picture of the linear commits from the basic parent until the tip of the branch. It helps me also to understand deeply and defrentiate different branches I have in my project. It also visualize the relationship between the master branch and the new branches and where they meet on the line going in direction of their parent. It helps me understand that it's possible to checkout an old commit, make a new branch from it, give it a new name and make other commits as this commit, on which the new branch was made, their actual parent.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

When we merge two branches together, we actually merging the commits or changes that we have made to gather in one file to have the effect of oll of them on our project. All commits will be reachable by the branch we checked out when we did the merge. Representing the merge in a digram will clarify the relationship between branches and where they meet on the line of commits. It also helps to show which commits belong to which before and after the mergeing process.




What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic merging is really cool and saves time and effort for the developer. But unfortunately this doesn't work all time. Manual merging is tedious and consumes time. But it's the solution at the time of conflicts when changing the same lines of code. The best thing about merging manually is that the developer gurantee the result he wants and wxpects will show in the project file he's working on, unlike the automatic merging at the time of conflicts which might show unwanted and unexpected results. In short, both of the two kinds of merging are useful: automatic at the time of no conflict, and manual at the time of conflict.


